#include "iostream"  
#include "algorithm"  
using namespace std;   
  
#define Max 200  
#define Sky 9999  
  
int Top,Edge;  
   
bool Move[Max];  
int Dist[Max],Map[Max][Max];  
  
int Prime()  
{  
    int Sum=0;  
      
    int i,j;  
    for(i=1;i<=Top;i++)  
    {  
        Dist[i]=Map[1][i];  
        Move[i]=false;  
    }  
    Move[1]=true;  
    Dist[1]=0;  
    //每次查找未合并的点中Dist最小的那一个
    for(i=1;i<Top;i++) {  
        int min=Sky,k=-1;  
        for(j=1;j<=Top;j++) {  
            if(min>Dist[j]  && !Move[j]) {  
                min=Dist[j];  
                k=j;  
            }  
        }  
        //标记找到的距离连通量最近的点
        Move[k]=true;  
        //每合并一个点，修改Dist表中离连通量的最近距离
        if(k!=-1) {     
            Sum+=Dist[k];  
            for(j=1;j<=Top;j++) {  
                if(Dist[j]>Map[k][j] && !Move[j]) {  
                    Dist[j]=Map[k][j];  
                }  
            }  
        }  
    }  
    return Sum;  
}  

int main()  
{
    cin>>Top;  
    Edge=Top*(Top-1)/2;      
    int i,j;  
    for(i=1;i<=Top;i++) {
        for(j=1;j<=Top;j++)  {  
            Map[i][j]=Sky;  
        } 
    }  
    for(i=1;i<=Edge;i++)  
    {  
         int x,y,z,d;  
         cin>>x>>y>>z>>d;            
         if(d==1)  
         {  
             Map[x][y]=Map[y][x]=0;  
         }  
         else  
         {  
              Map[x][y]=Map[y][x]=z;  
         }    
    }  
    cout<<Prime()<<endl;    
    return 0;  
}  
